{"version":3,"sources":["pages/game/history.module.css","pages/game/sheet.module.css","utils/localforage.ts","providers/local-items.tsx","storage/game.ts","storage/boards.ts","utils/avatarStyles.ts","pages/game/settings.tsx","utils/ErrorFallback.tsx","utils/cartesian.ts","utils/notEmpty.ts","utils/game-calculator.tsx","providers/game-calculator.tsx","utils/ClueCard.tsx","pages/game/action.tsx","pages/game/history.tsx","pages/game/sheet.tsx","pages/game/index.tsx","App.tsx","storage/page.ts","index.tsx"],"names":["module","exports","useLocalItem","key","fallback","useState","state","setState","fetchLatest","useCallback","localforage","getItem","then","answer","useEffect","value","setItem","emptyArray","customBoards","name","categories","cards","map","category","LocalItemsContext","createContext","LocalItemsProvider","props","Provider","activeGame","gameHistory","currentPage","children","useLocalItems","ctx","useContext","Error","useActiveGame","useBoards","boards","useMemo","purpleAvatar","background","color","ActiveGameSettings","board","setActiveGame","setGameHistory","cardsOnPlayers","length","publicCards","averageCards","players","use","tag","Date","date","toLocaleString","enhanced","label","options","b","i","toString","onChange","e","parseInt","currentTarget","nonInteractive","player","ripple","icon","size","style","defaultValue","clone","flexGrow","Math","floor","ceil","rootProps","width","whiteSpace","onClick","splice","mini","p","choice","card","selected","includes","onInteraction","filter","c","me","myCards","height","position","right","bottom","t","JSON","parse","stringify","ErrorFallback","actions","action","document","location","textAlign","screen","raised","cartesian","arrs","lenarr","v","idx","carry","inner","outer","cartesianLength","reduce","n","o","cartesianWithLength","notEmpty","undefined","calculateGame","game","certainties","cal","playerIs","Object","keys","possiblyUnknownPlayers","possibleOwners","errors","getCardOwner","cardI","find","owner","getCardPlayerStatus","playerI","markOwner","reason","certainty","push","markNotOwner","forEach","message","cardsOfPlayers","values","type","playersNotDisproved","indexOf","playerDisproved","suggestedCards","cardStatus","relatedActions","relatedCertainties","certaintiesAtStart","_","playersPossiblyOwningCard","categoryI","categoryCards","categoryCardsSolution","s","categoryCardsPossiblySolution","actionI","status","possiblyShownCards","playerOwnsCertainties","playerDoesntOwnCertainties","playerDoesntOwnCards","countPerCardPerPlayer","fromEntries","allUnfilteredPossiblities","certainOwner","possibilitiesGenerator","amountOfUnfilteredPossibilities","console","log","time","amountOfPossibilities","possibility","calculatedPossibility","timeEnd","table","countPerPlayer","solution","notSolution","useGameCalculatorValue","calculatedActiveGame","GameCalculatorContext","GameCalculatorProvider","useGameCalculator","ClueCard","ActiveGameAction","lastPlayer","nextPlayer","newAction","PlayerSelector","onSelect","sort","a","display","justifyContent","ActiveGameActionFallback","alert","ActiveGameHistory","twoLine","className","styles","historyItem","graphic","text","secondaryText","possiblyShown","some","suggestedCard","suggestedCardNotShown","ActiveGameHistoryFallback","ActiveGameSheet","calculation","ActiveGameSheetFallback","ActiveGame","activeTab","setActiveTab","getTime","activeTabIndex","onActivate","evt","detail","index","FallbackComponent","App","drawerOpen","setDrawerOpen","page","setPage","onDrawerListClick","modal","open","onClose","activated","title","navigationIcon","onNav","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.92f2a507.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"historyItem\":\"history_historyItem__2uc_D\",\"suggestedCard\":\"history_suggestedCard__2CSfd\",\"suggestedCardNotShown\":\"history_suggestedCardNotShown__34ExG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"solution\":\"sheet_solution__7Jzbk\",\"notSolution\":\"sheet_notSolution__15OAZ\"};","import { useCallback, useEffect, useState } from 'react';\nimport localforage from 'localforage';\n\nexport function useLocalItem<T>(key: string, fallback: T) {\n    const [state, setState] = useState<T>(fallback);\n\n    const fetchLatest = useCallback(() => {\n        localforage.getItem<T>(key).then(answer => {\n            setState(null === answer ? fallback : answer)\n        });\n    }, [key, fallback]);\n\n    useEffect(() => {\n        fetchLatest();\n    }, [fetchLatest])\n    \n\n    const setLocalItem = useCallback((value: T) => {\n        localforage.setItem(key, value).then(() => fetchLatest());\n    }, [fetchLatest, key]);\n\n    return [state as T, setLocalItem] as const;\n}","import { createContext, useContext, ReactNode } from \"react\";\nimport { ClueBoard } from \"../storage/boards\";\nimport { ClueGame } from \"../storage/game\";\nimport { useLocalItem } from \"../utils/localforage\";\n\nconst emptyArray: never[] = [];\nconst customBoards: ClueBoard[] = [\n  {\n    name: \"Cluedronken\",\n    categories: [\"Verdachten\", \"Wapens\", \"Locaties\"],\n    cards: [\n      ...[\"Bart\", \"Eline\", \"Irene\", \"Jari\", \"Mike\", \"Naomi\"].map((name) => ({\n        category: 0,\n        name,\n      })),\n      ...[\n        \"Biertje\",\n        \"Flesje pino\",\n        \"Stinkbrie\",\n        \"Waakhond\",\n        \"Wimpers\",\n        \"Zweepje\",\n      ].map((name) => ({ category: 1, name })),\n      ...[\n        \"Bed\",\n        \"Berlijn\",\n        \"Club G\",\n        \"Friesland\",\n        \"Groene Ster\",\n        \"Hamburg\",\n        \"Oliveo\",\n        \"Strand\",\n        \"Ventura Toernooi\",\n      ].map((name) => ({ category: 2, name })),\n    ],\n  },\n];\nfunction useLocalItemsValue() {\n  return {\n    customBoards: useLocalItem<ClueBoard[]>(\"customBoards\", customBoards),\n    activeGame: useLocalItem<ClueGame | null>(\"activeGame\", null),\n    gameHistory: useLocalItem<ClueGame[]>(\"gameHistory\", emptyArray),\n    currentPage: useLocalItem<\"game\" | \"games\">(\"current-page\", \"game\"),\n  };\n}\n\ntype LocalItemsValue = ReturnType<typeof useLocalItemsValue>;\n\nconst LocalItemsContext = createContext<null | LocalItemsValue>(null);\n\nexport function LocalItemsProvider(props: { children: ReactNode }) {\n  return (\n    <LocalItemsContext.Provider value={useLocalItemsValue()}>\n      {props.children}\n    </LocalItemsContext.Provider>\n  );\n}\n\nexport function useLocalItems() {\n  const ctx = useContext(LocalItemsContext);\n  if (!ctx) {\n    throw new Error(\"There was no CtxContextProvider wrapped!\");\n  }\n  return ctx;\n}\n","import { useLocalItems } from \"../providers/local-items\";\n\ninterface CluePlayer {\n  name: string;\n  cards: number;\n}\n\ninterface ClueActionSuggestion {\n  type: \"suggestion\";\n  player: number;\n  suggestedCards: number[];\n  playerDisproved?: number;\n  card?: number;\n}\n\ninterface ClueActionAccusation {\n  type: \"accusation\";\n  player: number;\n  correct: boolean;\n  cards?: string[];\n}\n\nexport type ClueAction = ClueActionSuggestion | ClueActionAccusation;\n\nexport interface ClueGame {\n  date: number; // new Date().getTime();\n  board: number;\n  players: CluePlayer[];\n  me: number;\n  myCards: number[];\n  publicCards: number[];\n  actions: ClueAction[];\n  /**\n   * This is only while the user is still entering an action.\n   * After that, it will be moved to 'actions'.\n   */\n  newAction?: ClueAction;\n}\n\nexport function useActiveGame() {\n  return useLocalItems().activeGame;\n}\n\nexport function useGameHistory() {\n  return useLocalItems().gameHistory;\n}\n","import { useMemo } from \"react\";\nimport { useLocalItems } from \"../providers/local-items\";\n\nexport interface ClueBoard {\n  name: string;\n  categories: string[];\n  cards: { category: number; name: string }[];\n}\n\nfunction useCustomBoards() {\n  return useLocalItems().customBoards;\n}\n\nexport function useBoards() {\n  const [customBoards] = useCustomBoards();\n  const boards = useMemo<ClueBoard[]>(\n    () => [\n      {\n        name: \"UK edition\",\n        categories: [\"Characters\", \"Weapons\", \"Rooms\"],\n        cards: [\n          ...[\n            \"Miss Scarlett\",\n            \"Rev Green\",\n            \"Colonel Mustard\",\n            \"Professor Plum\",\n            \"Mrs. Peacock\",\n            \"Mrs. White\",\n          ].map((name) => ({ category: 0, name })),\n          ...[\n            \"Candlestick\",\n            \"Dagger\",\n            \"Lead Pipe\",\n            \"Revolver\",\n            \"Rope\",\n            \"Wrench\",\n          ].map((name) => ({ category: 1, name })),\n          ...[\n            \"Ballroom\",\n            \"Billiard Room\",\n            \"Conservatory\",\n            \"Dining Room\",\n            \"Hall\",\n            \"Kitchen\",\n            \"Library\",\n            \"Lounge\",\n            \"Study\",\n          ].map((name) => ({ category: 2, name })),\n        ],\n      },\n      ...customBoards,\n    ],\n    [customBoards]\n  );\n\n  return { boards };\n}\n","import { CSSProperties } from \"react\";\n\nexport const purpleAvatar: CSSProperties = {\n    background: \"var(--mdc-theme-primary, #6200ee)\",\n    color: \"white\",\n  }","import { Typography } from \"@rmwc/typography\";\nimport { useActiveGame, useGameHistory } from \"../../storage/game\";\nimport { Select } from \"@rmwc/select\";\nimport { TextField } from \"@rmwc/textfield\";\nimport { List, ListItem, ListItemGraphic, ListItemMeta } from \"@rmwc/list\";\nimport { Avatar } from \"@rmwc/avatar\";\nimport { Fab } from \"@rmwc/fab\";\nimport { IconButton } from \"@rmwc/icon-button\";\nimport { ChipSet, Chip } from \"@rmwc/chip\";\nimport { useBoards } from \"../../storage/boards\";\nimport { purpleAvatar } from \"../../utils/avatarStyles\";\n\ninterface Props {\n  boards: ReturnType<typeof useBoards>[\"boards\"];\n  board: ReturnType<typeof useBoards>[\"boards\"][0];\n  activeGame: NonNullable<ReturnType<typeof useActiveGame>[0]>;\n  setActiveGame: ReturnType<typeof useActiveGame>[1];\n}\nexport function ActiveGameSettings(props: Props) {\n  const { boards, board, activeGame, setActiveGame } = props;\n  const [gameHistory, setGameHistory] = useGameHistory();\n\n  const cardsOnPlayers =\n    board.cards.length -\n    board.categories.length -\n    activeGame.publicCards.length;\n\n  const averageCards = cardsOnPlayers / activeGame.players.length;\n\n  return (\n    <>\n      <Typography use=\"headline6\" tag=\"h2\">\n        Basic info\n      </Typography>\n      <Typography use=\"body1\" tag=\"p\">\n        Game created on {new Date(activeGame.date).toLocaleString(\"en-GB\")}.\n      </Typography>\n      <Select\n        enhanced\n        label=\"Board edition\"\n        options={boards.map((b, i) => ({\n          label: `${b.name} (${b.cards.length} cards)`,\n          value: i.toString(),\n        }))}\n        value={activeGame.board.toString()}\n        onChange={(e) =>\n          setActiveGame({\n            ...activeGame,\n            board: parseInt(e.currentTarget.value, 10),\n          })\n        }\n      />\n      <Typography use=\"headline6\" tag=\"h2\">\n        Players\n      </Typography>\n      <List nonInteractive>\n        {activeGame.players.map((player, i) => (\n          <ListItem ripple={false} key={`${i}${activeGame.players.length}`}>\n            <ListItemGraphic\n              icon={\n                <Avatar size=\"medium\" name={player.name} style={purpleAvatar} />\n              }\n            />\n            <TextField\n              label={`Player ${i + 1} name`}\n              defaultValue={player.name}\n              onChange={(e) => {\n                const players = clone(activeGame.players);\n                players[i].name = e.currentTarget.value;\n                setActiveGame({ ...activeGame, players });\n              }}\n              style={{ flexGrow: 1 }}\n            />\n            {Math.floor(averageCards) !== Math.ceil(averageCards) && (\n              <Select\n                options={[\n                  Math.floor(averageCards).toString(),\n                  Math.ceil(averageCards).toString(),\n                ]}\n                value={player.cards.toString()}\n                onChange={(e) => {\n                  const players = clone(activeGame.players);\n                  players[i].cards = parseInt(e.currentTarget.value);\n                  setActiveGame({ ...activeGame, players });\n                }}\n                rootProps={{ style: { width: 70 } }}\n              />\n            )}\n            <ListItemMeta style={{ whiteSpace: \"nowrap\" }}>\n              {activeGame.players.length > 1 && (\n                <IconButton\n                  icon=\"remove\"\n                  onClick={() => {\n                    const players = [...activeGame.players];\n                    players.splice(i, 1);\n                    setActiveGame({ ...activeGame, players });\n                  }}\n                />\n              )}\n            </ListItemMeta>\n          </ListItem>\n        ))}\n      </List>\n      <Fab\n        mini\n        icon=\"add\"\n        label=\"Create\"\n        onClick={(e) => {\n          const cards = Math.floor(\n            cardsOnPlayers / (activeGame.players.length + 1)\n          );\n          setActiveGame({\n            ...activeGame,\n            players: [\n              ...activeGame.players.map((p) => ({ ...p, cards })),\n              { name: \"\", cards },\n            ],\n          });\n        }}\n      />\n      <Typography use=\"headline6\" tag=\"h2\">\n        Face-up cards\n      </Typography>\n      <ChipSet choice>\n        {board.cards.map((card, i) => {\n          const selected = activeGame.publicCards.includes(i);\n          return (\n            <Chip\n              key={i}\n              label={card.name}\n              onInteraction={() =>\n                setActiveGame({\n                  ...activeGame,\n                  publicCards: selected\n                    ? activeGame.publicCards.filter((c) => c !== i)\n                    : [...activeGame.publicCards, i],\n                })\n              }\n              selected={selected}\n            />\n          );\n        })}\n      </ChipSet>\n      <Typography use=\"headline6\" tag=\"h2\">\n        Me\n      </Typography>\n      <Select\n        enhanced\n        options={activeGame.players.map((player, i) => ({\n          label: player.name,\n          value: i.toString(),\n        }))}\n        defaultValue={activeGame.me.toString()}\n        onChange={(e) => {\n          setActiveGame({\n            ...activeGame,\n            me: parseInt(e.currentTarget.value),\n          });\n        }}\n      />\n      <ChipSet choice>\n        {board.cards.map((card, i) => {\n          const selected = activeGame.myCards.includes(i);\n          return (\n            <Chip\n              key={i}\n              label={card.name}\n              onInteraction={() =>\n                setActiveGame({\n                  ...activeGame,\n                  myCards: selected\n                    ? activeGame.myCards.filter((c) => c !== i)\n                    : [...activeGame.myCards, i],\n                })\n              }\n              selected={selected}\n            />\n          );\n        })}\n      </ChipSet>\n      <div style={{ height: 80 }}>\n        <Fab\n          icon=\"archive\"\n          label=\"Archive\"\n          style={{ position: \"fixed\", right: 16, bottom: 16 }}\n          onClick={() => {\n            setGameHistory([...gameHistory, activeGame]);\n            setActiveGame(null);\n          }}\n        />\n      </div>\n    </>\n  );\n}\n\nfunction clone<T>(t: T): T {\n  return JSON.parse(JSON.stringify(t));\n}\n","import { Button } from \"@rmwc/button\";\nimport { Typography } from \"@rmwc/typography\";\nimport { useActiveGame } from \"../storage/game\";\n\ninterface Props {\n  screen: string;\n  actions: {\n    label: string;\n    action: (utils: {\n      activeGame: ReturnType<typeof useActiveGame>[0];\n      setActiveGame: ReturnType<typeof useActiveGame>[1];\n    }) => void;\n  }[];\n}\nexport function ErrorFallback(props: Props) {\n  const [activeGame, setActiveGame] = useActiveGame();\n  const actions = [\n    ...props.actions,\n    {\n      label: \"Refresh\",\n      action: () => {\n        // eslint-disable-next-line no-self-assign\n        document.location = document.location;\n      },\n    },\n  ];\n  return (\n    <div style={{ textAlign: \"center\" }}>\n      <Typography use=\"headline5\" tag=\"h2\">\n        Error while loading the <em>{props.screen}</em> screen\n      </Typography>\n      {actions.map((action, i) => {\n        return (\n          <p>\n            <Button\n              raised\n              label={action.label}\n              onClick={() => {\n                action.action({ activeGame, setActiveGame });\n              }}\n            />\n          </p>\n        );\n      })}\n    </div>\n  );\n}\n","/** https://github.com/fasiha/cartesian-product-generator/issues/3 */\nexport function* cartesian<T>(...arrs: T[][]): Generator<T[]> {\n  const lenarr = arrs.map((v) => v.length);\n  const idx = lenarr.map(() => 0);\n  let carry = 0;\n  while (!carry) {\n    yield idx.map((inner, outer) => arrs[outer][inner]);\n    carry = 1;\n    for (let i = 0; i < lenarr.length; i += 1) {\n      idx[i] += carry;\n      if (idx[i] >= lenarr[i]) {\n        idx[i] = 0;\n        carry = 1;\n      } else {\n        carry = 0;\n        break;\n      }\n    }\n  }\n}\n\nexport function cartesianLength(...arrs: any[][]) {\n  return arrs.reduce((n, o) => n * o.length, 1);\n}\n\nexport function cartesianWithLength<T>(...arrs: T[][]) {\n  return [cartesian(...arrs), cartesianLength(...arrs)] as const;\n}\n","export function notEmpty<T>(value: T | null | undefined): value is T {\n  return value !== null && typeof value !== undefined;\n}\n","import { ClueBoard } from \"../storage/boards\";\nimport { ClueGame } from \"../storage/game\";\nimport { cartesianWithLength } from \"./cartesian\";\nimport { notEmpty } from \"./notEmpty\";\n\ninterface Certainty {\n  player: number | \"FACE_UP\" | \"SOLUTION\";\n  card: number;\n  owner: boolean;\n  reason: string;\n}\n\ninterface GameError {\n  message: string;\n  relatedActions?: number[];\n  relatedCertainties?: number[];\n}\n\nexport function calculateGame(\n  game: ClueGame,\n  board: ClueBoard,\n  certainties: Certainty[] = [],\n  cal = true\n) {\n  const playerIs = Object.keys(game.players).map((p) => parseInt(p, 10));\n  const possiblyUnknownPlayers = [...playerIs, \"SOLUTION\" as const];\n  const possibleOwners = [...possiblyUnknownPlayers, \"FACE_UP\" as const];\n  const errors: GameError[] = [];\n\n  function getCardOwner(cardI: number) {\n    return certainties.find((c) => c.card === cardI && c.owner === true);\n  }\n\n  function getCardPlayerStatus(cardI: number, playerI: Certainty[\"player\"]) {\n    return certainties.find((c) => c.card === cardI && c.player === playerI);\n  }\n\n  function markOwner(\n    cardI: number,\n    playerI: Certainty[\"player\"],\n    reason: string\n  ) {\n    let certainty = getCardPlayerStatus(cardI, playerI);\n    if (!certainty) {\n      certainty = {\n        player: playerI,\n        card: cardI,\n        owner: true,\n        reason,\n      };\n      certainties.push(certainty);\n    }\n    return certainty;\n  }\n\n  function markNotOwner(\n    cardI: number,\n    playerI: Certainty[\"player\"],\n    reason: string\n  ) {\n    let certainty = getCardPlayerStatus(cardI, playerI);\n    if (!certainty) {\n      certainty = {\n        player: playerI,\n        card: cardI,\n        owner: false,\n        reason,\n      };\n      certainties.push(certainty);\n    }\n    return certainty;\n  }\n\n  /**\n   * Cards we have ourselves\n   */\n  game.myCards.forEach((card) => {\n    markOwner(card, game.me, \"This is my card.\");\n  });\n\n  if (game.players[game.me].cards !== game.myCards.length) {\n    errors.push({\n      message: `You should have ${\n        game.players[game.me].cards\n      } cards, but you have selected ${game.myCards.length} cards.`,\n    });\n  }\n\n  /**\n   * Cards that are faced up\n   */\n  game.publicCards.forEach((card) => {\n    markOwner(card, \"FACE_UP\", \"This is a face-up card.\");\n  });\n\n  const cardsOfPlayers = Object.values(game.players).reduce(\n    (c, p) => c + p.cards,\n    0\n  );\n  if (\n    game.publicCards.length !==\n    board.cards.length - cardsOfPlayers - board.categories.length\n  ) {\n    errors.push({\n      message: `In total, all players have ${cardsOfPlayers} cards. ${board.categories.length} cards are the solution. There are ${board.cards.length} cards on this board, which means that ${game.publicCards.length} cards should be faced-up (or the amount of cards per player should be changed).`,\n    });\n  }\n\n  game.actions.forEach((action) => {\n    if (action.type === \"suggestion\") {\n      /**\n       * Players that did not disprove a card\n       */\n      const playersNotDisproved = [...playerIs, ...playerIs];\n\n      playersNotDisproved.splice(\n        0,\n        playersNotDisproved.indexOf(action.player) + 1\n      );\n\n      playersNotDisproved.splice(\n        playersNotDisproved.indexOf(action.playerDisproved ?? action.player)\n      );\n\n      playersNotDisproved.forEach((player) => {\n        action.suggestedCards.forEach((card) => {\n          const cardStatus = getCardPlayerStatus(card, player);\n          if (!cardStatus) {\n            markNotOwner(\n              card,\n              player,\n              \"When asked for this card, the user did not disprove.\"\n            );\n          } else if (cardStatus.owner === true) {\n            errors.push({\n              message:\n                \"The user did not disprove this card when asked for it, but we already know the player owns this card.\",\n              relatedActions: [game.actions.indexOf(action)],\n              relatedCertainties: [certainties.indexOf(cardStatus)],\n            });\n          }\n        });\n      });\n\n      /**\n       * Cards that have been disproved\n       */\n      if (\n        typeof action.playerDisproved === \"number\" &&\n        typeof action.card === \"number\"\n      ) {\n        const cardStatus = markOwner(\n          action.card,\n          action.playerDisproved,\n          \"When asked for this card, the user showed this card.\"\n        );\n        if (cardStatus.owner === false) {\n          errors.push({\n            message:\n              \"The user showed this card, but we already know this user does not own this card.\",\n            relatedActions: [game.actions.indexOf(action)],\n            relatedCertainties: [certainties.indexOf(cardStatus)],\n          });\n        }\n      }\n    }\n  });\n\n  while (true) {\n    let certaintiesAtStart = certainties.length;\n\n    board.cards.forEach((_, cardI) => {\n      /**\n       * If we know a player has this card or it is the solution, we know certain that all other\n       * players don't have it.\n       */\n      const owner = getCardOwner(cardI);\n      if (owner) {\n        possiblyUnknownPlayers.forEach((playerI) => {\n          const cardStatus = markNotOwner(\n            cardI,\n            playerI,\n            \"We already know who owns this card, so we also know this player does not own this card.\"\n          );\n\n          if (cardStatus.owner && cardStatus !== owner) {\n            errors.push({\n              message: \"There are two owners for the same card.\",\n              relatedCertainties: [\n                certainties.indexOf(owner),\n                certainties.indexOf(cardStatus),\n              ],\n            });\n          }\n        });\n      } else {\n        /**\n         * If we know this card is in no position but one, we know that is where the card must be.\n         */\n        const playersPossiblyOwningCard = possiblyUnknownPlayers.filter(\n          (playerI) => !getCardPlayerStatus(cardI, playerI)\n        );\n        if (playersPossiblyOwningCard.length === 1) {\n          const player = playersPossiblyOwningCard[0];\n          markOwner(\n            cardI,\n            player,\n            player === \"SOLUTION\"\n              ? \"No-one has this card, so it must be the solution.\"\n              : \"We already know this card is not the solution and we already know that all other players do not have this card.\"\n          );\n        } else if (playersPossiblyOwningCard.length === 0) {\n          errors.push({\n            message:\n              \"This card is owned by nobody but is also not the solution.\",\n            relatedCertainties: possiblyUnknownPlayers.map((playerI) =>\n              certainties.indexOf(getCardPlayerStatus(cardI, playerI)!)\n            ),\n          });\n        }\n      }\n    });\n\n    board.categories.forEach((_, categoryI) => {\n      const categoryCards = board.cards\n        .map((card, cardI) =>\n          card.category === categoryI\n            ? { cardI, owner: getCardOwner(cardI) }\n            : null\n        )\n        .filter(notEmpty);\n\n      /**\n       * If we know a certain card of this category is the solution, we know\n       * that all other cards of the same category are not the solution.\n       */\n\n      const categoryCardsSolution = categoryCards.filter(\n        (c) => c.owner?.player === \"SOLUTION\"\n      );\n\n      if (categoryCardsSolution.length === 1) {\n        categoryCards.forEach(({ cardI }) => {\n          markNotOwner(\n            cardI,\n            \"SOLUTION\",\n            \"We already know that another card of this category is the solution, so this card can't be the solution.\"\n          );\n        });\n      } else if (categoryCardsSolution.length > 1) {\n        errors.push({\n          message:\n            \"Multiple cards of the category are not the solution, which is impossible.\",\n          relatedCertainties: categoryCardsSolution.map((s) =>\n            certainties.indexOf(s.owner!)\n          ),\n        });\n      } else {\n        /**\n         * If we know it's none of the other cards of the same category, we know it is the\n         * left over card.\n         */\n        const categoryCardsPossiblySolution = categoryCards.filter(\n          (c) => !c.owner || c.owner.player !== \"SOLUTION\"\n        );\n\n        if (categoryCardsPossiblySolution.length === 1) {\n          markOwner(\n            categoryCardsPossiblySolution[0].cardI,\n            \"SOLUTION\",\n            \"All other cards of this category are not the solution, so this card must be the solution.\"\n          );\n        } else if (categoryCardsPossiblySolution.length === 0) {\n          errors.push({\n            message:\n              \"All cards of the category are not the solution, which is impossible.\",\n            relatedCertainties: categoryCards.map((s) =>\n              certainties.indexOf(s.owner!)\n            ),\n          });\n        }\n      }\n    });\n\n    /**\n     * If a suggestion was disproved by a player, that player has at least one of these\n     * cards. If we know that the player doesn't own two cards, the player must own the\n     * other card.\n     */\n    game.actions.forEach((action, actionI) => {\n      if (\n        action.type !== \"suggestion\" ||\n        typeof action.playerDisproved !== \"number\"\n      )\n        return;\n\n      const playerDisproved = action.playerDisproved;\n\n      const suggestedCards = action.suggestedCards.map((cardI) => ({\n        cardI,\n        status: getCardPlayerStatus(cardI, playerDisproved),\n      }));\n\n      const possiblyShownCards = suggestedCards.filter(\n        (c) => !c.status || c.status.owner === true\n      );\n\n      if (possiblyShownCards.length === 1) {\n        markOwner(\n          possiblyShownCards[0].cardI,\n          action.playerDisproved,\n          \"The player disproved a suggestion, and we know the other cards are not owned by this player.\"\n        );\n      }\n      if (possiblyShownCards.length === 0) {\n        errors.push({\n          message:\n            \"The user disproved one of the cards, but we know that the user has none of them.\",\n          relatedActions: [actionI],\n          relatedCertainties: suggestedCards.map((c) =>\n            certainties.indexOf(c.status!)\n          ),\n        });\n      }\n    });\n\n    game.players.forEach((player, playerI) => {\n      /**\n       * If we already know all the cards of someone, we know the player doesn't have any\n       * other cards.\n       */\n      const playerOwnsCertainties = certainties.filter(\n        (c) => c.player === playerI && c.owner === true\n      );\n      if (playerOwnsCertainties.length >= player.cards) {\n        board.cards.forEach((_, cardI) => {\n          markNotOwner(\n            cardI,\n            playerI,\n            \"We already know all cards this user has, so it cannot have this card.\"\n          );\n        });\n      }\n      if (playerOwnsCertainties.length > player.cards) {\n        errors.push({\n          message: `We know that the player has ${playerOwnsCertainties.length} while this player should have only ${player.cards} cards.`,\n          relatedCertainties: playerOwnsCertainties.map((c) =>\n            certainties.indexOf(c)\n          ),\n        });\n      }\n\n      /**\n       * If we already know enough cards that someone doesn't have, we know the player\n       * owns the remaining cards.\n       */\n      const playerDoesntOwnCertainties = certainties.filter(\n        (c) => c.player === playerI && c.owner === false\n      );\n      const playerDoesntOwnCards = board.cards.length - player.cards;\n      if (playerDoesntOwnCertainties.length >= playerDoesntOwnCards) {\n        board.cards.forEach((_, cardI) => {\n          markOwner(\n            cardI,\n            playerI,\n            \"We already know that this user does not have any other card, so it must have this card.\"\n          );\n        });\n      }\n      if (playerDoesntOwnCertainties.length > playerDoesntOwnCards) {\n        errors.push({\n          message: `We know that the player doesn't have ${playerDoesntOwnCertainties.length} cards for sure, while this player should not have ${playerDoesntOwnCards} cards.`,\n          relatedCertainties: playerDoesntOwnCertainties.map((c) =>\n            certainties.indexOf(c)\n          ),\n        });\n      }\n    });\n\n    if (certaintiesAtStart === certainties.length) {\n      break;\n    }\n  }\n\n  const countPerCardPerPlayer = board.cards.map(() => {\n    return Object.fromEntries(\n      possibleOwners.map((playerI) => {\n        return [playerI, 0];\n      })\n    );\n  });\n\n  /**\n   * If we have 0 erors, we can go over all possibilities and check what the chances are\n   * that a certain player has a certain card.\n   */\n  if (errors.length === 0) {\n    const allUnfilteredPossiblities = board.cards.map((card, cardI) => {\n      const certainOwner = getCardOwner(cardI);\n      if (certainOwner) return [certainOwner.player];\n\n      return possiblyUnknownPlayers.filter(\n        (playerI) => !getCardPlayerStatus(cardI, playerI)\n      );\n    });\n\n    const [\n      possibilitiesGenerator,\n      amountOfUnfilteredPossibilities,\n    ] = cartesianWithLength(...allUnfilteredPossiblities);\n\n    console.log(\n      `There are ${amountOfUnfilteredPossibilities} possibilities (unfiltered)`\n    );\n\n    if (\n      amountOfUnfilteredPossibilities > 1 &&\n      amountOfUnfilteredPossibilities < 1000 &&\n      cal\n    ) {\n      console.time(\"Calculating possibilities\");\n      let amountOfPossibilities = 0;\n\n      for (const possibility of possibilitiesGenerator) {\n        const calculatedPossibility = calculateGame(\n          game,\n          board,\n          possibility.map((playerI, cardI) => ({\n            player: playerI,\n            card: cardI,\n            owner: true,\n            reason: \"Checking for possibilities\",\n          })),\n          false\n        );\n        if (calculatedPossibility.errors.length) {\n          continue;\n        }\n\n        // We can now 'count' this possiblity\n        amountOfPossibilities += 1;\n        possibility.forEach((playerI, cardI) => {\n          countPerCardPerPlayer[cardI][playerI] += 1;\n        });\n      }\n\n      console.timeEnd(\"Calculating possibilities\");\n\n      console.log(\n        \"Out of\",\n        amountOfUnfilteredPossibilities,\n        \"possibilities, \",\n        amountOfPossibilities,\n        \"were legit. Stats:\"\n      );\n      console.table(countPerCardPerPlayer);\n\n      countPerCardPerPlayer.forEach((countPerPlayer, cardI) => {\n        const playerI = Object.keys(countPerPlayer).find(\n          (playerI) => countPerPlayer[playerI] === amountOfPossibilities\n        );\n        if (typeof playerI !== \"undefined\") {\n          markOwner(\n            cardI,\n            playerI === \"SOLUTION\" || playerI === \"FACE_UP\"\n              ? playerI\n              : parseInt(playerI),\n            \"This is the only possibility, by going over all possibilities.\"\n          );\n        }\n      });\n    }\n  }\n\n  return {\n    certainties,\n    solution: certainties\n      .filter((c) => c.player === \"SOLUTION\" && c.owner === true)\n      .map((c) => c.card),\n    notSolution: certainties\n      .filter(\n        (c) =>\n          (c.player !== \"SOLUTION\" && c.owner === true) ||\n          (c.player === \"SOLUTION\" && c.owner === false)\n      )\n      .map((c) => c.card),\n    errors,\n    countPerCardPerPlayer,\n  };\n}\n\n/**\n *\n */\n","import {\n  createContext,\n  useContext,\n  ReactNode,\n  useMemo,\n  useEffect,\n} from \"react\";\nimport { useBoards } from \"../storage/boards\";\nimport { useActiveGame } from \"../storage/game\";\nimport { calculateGame } from \"../utils/game-calculator\";\n\nfunction useGameCalculatorValue() {\n  const [activeGame] = useActiveGame();\n  const { boards } = useBoards();\n\n  const calculatedActiveGame = useMemo(\n    () => activeGame && calculateGame(activeGame, boards[activeGame.board]),\n    [activeGame, boards]\n  );\n\n  useEffect(() => {\n    console.log(calculatedActiveGame);\n  }, [calculatedActiveGame]);\n\n  return {\n    calculatedActiveGame,\n  };\n}\n\ntype GameCalculatorValue = ReturnType<typeof useGameCalculatorValue>;\n\nconst GameCalculatorContext = createContext<null | GameCalculatorValue>(null);\n\nexport function GameCalculatorProvider(props: { children: ReactNode }) {\n  return (\n    <GameCalculatorContext.Provider value={useGameCalculatorValue()}>\n      {props.children}\n    </GameCalculatorContext.Provider>\n  );\n}\n\nexport function useGameCalculator() {\n  const ctx = useContext(GameCalculatorContext);\n  if (!ctx) {\n    throw new Error(\"There was no CtxContextProvider wrapped!\");\n  }\n  return ctx;\n}\n","import { Chip } from \"@rmwc/chip\";\nimport { Avatar } from \"@rmwc/avatar\";\nimport { ClueBoard } from \"../storage/boards\";\nimport { purpleAvatar } from \"./avatarStyles\";\nimport { useGameCalculator } from \"../providers/game-calculator\";\nimport { useActiveGame } from \"../storage/game\";\n\ninterface Props {\n  board: ClueBoard;\n  card: number;\n  selected?: boolean;\n  onInteraction?: () => void;\n}\n\nexport function ClueCard(props: Props) {\n  const card = props.board.cards[props.card];\n  const { calculatedActiveGame } = useGameCalculator();\n  const owner = calculatedActiveGame?.certainties.find(\n    (c) => c.card === props.card && c.owner === true\n  );\n  const [activeGame] = useActiveGame();\n  return (\n    <Chip\n      selected={props.selected}\n      label={card.name}\n      icon={\n        owner?.player === \"SOLUTION\" ? (\n          <Avatar name={\"✅\"} style={purpleAvatar} />\n        ) : owner?.player === \"FACE_UP\" ? (\n          <Avatar name={\"\"} style={purpleAvatar} />\n        ) : owner ? (\n          <Avatar\n            name={activeGame?.players[owner.player].name || \"\"}\n            style={purpleAvatar}\n          />\n        ) : (\n          <Avatar name={\"?\"} />\n        )\n      }\n      onInteraction={props.onInteraction}\n    />\n  );\n}\n","import { Avatar } from \"@rmwc/avatar\";\nimport { Typography } from \"@rmwc/typography\";\nimport { useBoards } from \"../../storage/boards\";\nimport { ClueAction, ClueGame, useActiveGame } from \"../../storage/game\";\nimport { Ripple } from \"@rmwc/ripple\";\nimport { ChipSet } from \"@rmwc/chip\";\nimport { purpleAvatar } from \"../../utils/avatarStyles\";\nimport { Fab } from \"@rmwc/fab\";\nimport { ErrorFallback } from \"../../utils/ErrorFallback\";\nimport { ClueCard } from \"../../utils/ClueCard\";\n\ninterface Props {\n  board: ReturnType<typeof useBoards>[\"boards\"][0];\n  activeGame: ClueGame;\n  setActiveGame: ReturnType<typeof useActiveGame>[1];\n}\nexport function ActiveGameAction(props: Props) {\n  const { board, activeGame, setActiveGame } = props;\n\n  const lastPlayer = activeGame.actions[activeGame.actions.length - 1]?.player;\n\n  const nextPlayer =\n    typeof lastPlayer === \"number\"\n      ? (lastPlayer + 1) % activeGame.players.length\n      : 0;\n\n  const newAction: ClueAction = activeGame.newAction || {\n    type: \"suggestion\",\n    player: nextPlayer,\n    suggestedCards: [],\n  };\n  return (\n    <>\n      <Typography use=\"headline6\" tag=\"h2\">\n        Player\n      </Typography>\n      <PlayerSelector\n        activeGame={activeGame}\n        selected={newAction.player}\n        onSelect={(player) => {\n          setActiveGame({\n            ...activeGame,\n            newAction: { ...newAction, player },\n          });\n        }}\n      />\n\n      <Typography use=\"caption\" tag=\"p\" style={{ textAlign: \"center\" }}>\n        Calculated player: {activeGame.players[nextPlayer].name}\n      </Typography>\n\n      {newAction.type === \"suggestion\" && (\n        <>\n          <Typography use=\"headline6\" tag=\"h2\">\n            Suggestion\n          </Typography>\n\n          {board.categories.map((category, categoryI) => (\n            <ChipSet key={categoryI} choice>\n              {board.cards.map((card, cardI) => {\n                if (card.category !== categoryI) return null;\n                return (\n                  <ClueCard\n                    key={cardI}\n                    card={cardI}\n                    board={board}\n                    selected={newAction.suggestedCards.includes(cardI)}\n                    onInteraction={() => {\n                      setActiveGame({\n                        ...activeGame,\n                        newAction: {\n                          ...newAction,\n                          suggestedCards: [\n                            ...newAction.suggestedCards.filter(\n                              (c) => board.cards[c].category !== categoryI\n                            ),\n                            cardI,\n                          ].sort((a, b) => a - b),\n                        },\n                      });\n                    }}\n                  />\n                );\n              })}\n            </ChipSet>\n          ))}\n          <Typography use=\"headline6\" tag=\"h2\">\n            Disproved by\n          </Typography>\n\n          <PlayerSelector\n            activeGame={activeGame}\n            selected={newAction.playerDisproved ?? newAction.player}\n            onSelect={(player) => {\n              setActiveGame({\n                ...activeGame,\n                newAction: {\n                  ...newAction,\n                  playerDisproved:\n                    player === newAction.player ? undefined : player,\n                },\n              });\n            }}\n          />\n          {typeof newAction.playerDisproved === \"undefined\" && (\n            <Typography use=\"caption\" tag=\"p\" style={{ textAlign: \"center\" }}>\n              This means, disproved by no-one.\n            </Typography>\n          )}\n          {typeof newAction.playerDisproved !== \"undefined\" && (\n            <>\n              <Typography use=\"headline6\" tag=\"h2\">\n                Card shown\n              </Typography>\n              <ChipSet choice>\n                {newAction.suggestedCards.map((cardI) => {\n                  return (\n                    <ClueCard\n                      card={cardI}\n                      board={board}\n                      selected={newAction.card === cardI}\n                      onInteraction={() => {\n                        setActiveGame({\n                          ...activeGame,\n                          newAction: {\n                            ...newAction,\n                            card: newAction.card === cardI ? undefined : cardI,\n                          },\n                        });\n                      }}\n                    />\n                  );\n                })}\n              </ChipSet>\n            </>\n          )}\n          <div style={{ height: 80 }}>\n            <Fab\n              icon=\"add\"\n              label=\"Create\"\n              style={{ position: \"fixed\", right: 16, bottom: 16 }}\n              onClick={() => {\n                setActiveGame({\n                  ...activeGame,\n                  actions: [...activeGame.actions, newAction],\n                  newAction: undefined,\n                });\n              }}\n            />\n          </div>\n        </>\n      )}\n    </>\n  );\n}\n\nexport function PlayerSelector(props: {\n  activeGame: ClueGame;\n  selected: number;\n  onSelect: (player: number) => void;\n}) {\n  return (\n    <Typography\n      use=\"body1\"\n      tag=\"div\"\n      style={{ display: \"flex\", justifyContent: \"space-around\" }}\n    >\n      {props.activeGame.players.map((player, i) => {\n        return (\n          <Ripple key={i}>\n            <Avatar\n              size=\"xlarge\"\n              name={player.name}\n              style={props.selected === i ? purpleAvatar : undefined}\n              onClick={() => props.onSelect(i)}\n            />\n          </Ripple>\n        );\n      })}\n    </Typography>\n  );\n}\n\nexport function ActiveGameActionFallback() {\n  return (\n    <ErrorFallback\n      screen=\"Active game - Action\"\n      actions={[\n        {\n          label: \"Reset the new action\",\n          action: ({ activeGame, setActiveGame }) => {\n            if (activeGame) {\n              setActiveGame({ ...activeGame, newAction: undefined });\n              alert(\"Resetted the new action, please refresh.\");\n            } else {\n              alert(\"No new action available\");\n            }\n          },\n        },\n      ]}\n    />\n  );\n}\n","import { Avatar } from \"@rmwc/avatar\";\nimport { List, SimpleListItem } from \"@rmwc/list\";\nimport { useGameCalculator } from \"../../providers/game-calculator\";\nimport { ClueBoard } from \"../../storage/boards\";\nimport { ClueGame, useActiveGame } from \"../../storage/game\";\nimport { purpleAvatar } from \"../../utils/avatarStyles\";\nimport { ErrorFallback } from \"../../utils/ErrorFallback\";\nimport styles from \"./history.module.css\";\n\ninterface Props {\n  board: ClueBoard;\n  activeGame: ClueGame;\n  setActiveGame: ReturnType<typeof useActiveGame>[1];\n}\nexport function ActiveGameHistory(props: Props) {\n  const { board, activeGame } = props;\n  const { calculatedActiveGame } = useGameCalculator();\n\n  return (\n    <List twoLine>\n      {activeGame.actions.map((action, actionI) => {\n        return action.type === \"suggestion\" ? (\n          <SimpleListItem\n            key={actionI}\n            className={styles.historyItem}\n            graphic={\n              <Avatar\n                name={activeGame.players[action.player].name}\n                style={purpleAvatar}\n              />\n            }\n            text={`Suggestion - ${\n              typeof action.playerDisproved !== \"undefined\"\n                ? `disproved by ${\n                    activeGame.players[action.playerDisproved].name\n                  }${\n                    typeof action.card !== \"undefined\"\n                      ? ` with ${board.cards[action.card].name}`\n                      : \"\"\n                  }`\n                : `not disproved`\n            }`}\n            secondaryText={\n              <>\n                {action.suggestedCards.map((cardI) => {\n                  const possiblyShown = !calculatedActiveGame?.certainties.some(\n                    (c) =>\n                      c.player === (action.playerDisproved ?? action.player) &&\n                      c.card === cardI &&\n                      c.owner === false\n                  );\n                  return (\n                    <div\n                      key={cardI}\n                      className={`${styles.suggestedCard} ${\n                        possiblyShown ? \"\" : styles.suggestedCardNotShown\n                      }`}\n                    >\n                      {board.cards[cardI].name}\n                    </div>\n                  );\n                })}\n              </>\n            }\n          />\n        ) : null;\n      })}\n    </List>\n  );\n}\n\nexport function ActiveGameHistoryFallback() {\n  return (\n    <ErrorFallback\n      screen=\"Active game - History\"\n      actions={[\n        {\n          label: \"Remove the latest action\",\n          action: ({ activeGame, setActiveGame }) => {\n            if (activeGame?.actions.length) {\n              const actions = [...activeGame.actions];\n              actions.splice(actions.length - 1, 1);\n              setActiveGame({ ...activeGame, actions });\n              alert(\n                `Removed latest action, now ${actions.length} actions left. Please refresh.`\n              );\n            } else {\n              alert(\"No actions available.\");\n            }\n          },\n        },\n      ]}\n    />\n  );\n}\n","import {\n  DataTable,\n  DataTableBody,\n  DataTableCell,\n  DataTableContent,\n  DataTableHead,\n  DataTableHeadCell,\n  DataTableRow,\n} from \"@rmwc/data-table\";\nimport { Fragment } from \"react\";\nimport { ClueBoard } from \"../../storage/boards\";\nimport { ClueGame, useActiveGame } from \"../../storage/game\";\nimport { ErrorFallback } from \"../../utils/ErrorFallback\";\nimport { Icon } from \"@rmwc/icon\";\nimport styles from \"./sheet.module.css\";\nimport { useGameCalculator } from \"../../providers/game-calculator\";\nimport { Avatar } from \"@rmwc/avatar\";\nimport { purpleAvatar } from \"../../utils/avatarStyles\";\n\ninterface Props {\n  board: ClueBoard;\n  activeGame: ClueGame;\n  setActiveGame: ReturnType<typeof useActiveGame>[1];\n}\nexport function ActiveGameSheet(props: Props) {\n  const { board, activeGame } = props;\n\n  const { calculatedActiveGame: calculation } = useGameCalculator();\n\n  if (!calculation) throw new Error(\"There is no calculation available.\");\n\n  return (\n    <>\n      <DataTable>\n        <DataTableContent>\n          <DataTableHead>\n            <DataTableRow>\n              <DataTableHeadCell>Card</DataTableHeadCell>\n              {activeGame.players.map((player, playerI) => (\n                <DataTableHeadCell key={playerI}>\n                  <Avatar name={player.name} style={purpleAvatar} />\n                </DataTableHeadCell>\n              ))}\n            </DataTableRow>\n          </DataTableHead>\n          <DataTableBody>\n            {board.categories.map((category, categoryI) => (\n              <Fragment key={categoryI}>\n                <DataTableRow>\n                  <DataTableHeadCell>{category}</DataTableHeadCell>\n                  {activeGame.players.map((_, playerI) => (\n                    <DataTableCell key={playerI}></DataTableCell>\n                  ))}\n                </DataTableRow>\n                {board.cards.map((card, cardI) =>\n                  card.category !== categoryI ? null : (\n                    <DataTableRow key={cardI}>\n                      <DataTableCell\n                        className={\n                          calculation.solution.includes(cardI)\n                            ? styles.solution\n                            : calculation.notSolution.includes(cardI)\n                            ? styles.notSolution\n                            : undefined\n                        }\n                      >\n                        {card.name}\n                      </DataTableCell>\n                      {activeGame.players.map((_, playerI) => {\n                        const certainty = calculation.certainties.find(\n                          (c) => c.player === playerI && c.card === cardI\n                        );\n                        return (\n                          <DataTableCell key={playerI}>\n                            {certainty?.owner === true ? (\n                              <Icon icon=\"check\" />\n                            ) : certainty?.owner === false ? (\n                              <Icon icon=\"close\" />\n                            ) : activeGame.actions.some(\n                                (a) =>\n                                  a.type === \"suggestion\" &&\n                                  a.suggestedCards.includes(cardI) &&\n                                  a.playerDisproved === playerI &&\n                                  typeof a.card === \"undefined\"\n                              ) ? (\n                              <Icon icon=\"priority_high\" />\n                            ) : activeGame.actions.some(\n                                (a) =>\n                                  a.type === \"suggestion\" &&\n                                  a.suggestedCards.includes(cardI) &&\n                                  a.player === playerI\n                              ) ? (\n                              <Icon icon=\"remove\" />\n                            ) : null}\n                          </DataTableCell>\n                        );\n                      })}\n                    </DataTableRow>\n                  )\n                )}\n              </Fragment>\n            ))}\n          </DataTableBody>\n        </DataTableContent>\n      </DataTable>\n    </>\n  );\n}\n\nexport function ActiveGameSheetFallback() {\n  return <ErrorFallback screen=\"Active game - Sheet\" actions={[]} />;\n}\n","import { useState } from \"react\";\nimport { TabBar, Tab } from \"@rmwc/tabs\";\nimport \"@rmwc/tabs/styles\";\nimport { Typography } from \"@rmwc/typography\";\nimport \"@rmwc/typography/styles\";\nimport { useActiveGame } from \"../../storage/game\";\nimport { Button } from \"@rmwc/button\";\nimport \"@rmwc/button/styles\";\nimport { useBoards } from \"../../storage/boards\";\nimport { ActiveGameSettings } from \"./settings\";\nimport { ActiveGameAction, ActiveGameActionFallback } from \"./action\";\nimport { ErrorBoundary } from \"react-error-boundary\";\nimport { ActiveGameHistory, ActiveGameHistoryFallback } from \"./history\";\nimport { ActiveGameSheet, ActiveGameSheetFallback } from \"./sheet\";\n\nexport function ActiveGame() {\n  const [activeTab, setActiveTab] = useState(0);\n  const [activeGame, setActiveGame] = useActiveGame();\n  const { boards } = useBoards();\n  if (!activeGame) {\n    return (\n      <div style={{ textAlign: \"center\" }}>\n        <Typography use=\"body1\" tag=\"p\">\n          There is not a Clue game active yet.\n        </Typography>\n        <Typography use=\"body1\">\n          <Button\n            raised\n            onClick={() => {\n              setActiveGame({\n                date: new Date().getTime(),\n                board: 0,\n                players: [{ name: \"Me\", cards: 21 }],\n                me: 0,\n                myCards: [],\n                publicCards: [],\n                actions: [],\n              });\n            }}\n          >\n            New game\n          </Button>\n        </Typography>\n      </div>\n    );\n  }\n  const board = boards[activeGame.board];\n\n  return (\n    <>\n      <TabBar\n        activeTabIndex={activeTab}\n        onActivate={(evt) => setActiveTab(evt.detail.index)}\n      >\n        <Tab>Settings</Tab>\n        <Tab>Action</Tab>\n        <Tab>History</Tab>\n        <Tab>Sheet</Tab>\n      </TabBar>\n      {activeTab === 0 ? (\n        <ActiveGameSettings\n          boards={boards}\n          board={board}\n          activeGame={activeGame}\n          setActiveGame={setActiveGame}\n        />\n      ) : activeTab === 1 ? (\n        <ErrorBoundary FallbackComponent={ActiveGameActionFallback}>\n          <ActiveGameAction\n            board={board}\n            activeGame={activeGame}\n            setActiveGame={setActiveGame}\n          />\n        </ErrorBoundary>\n      ) : activeTab === 2 ? (\n        <ErrorBoundary FallbackComponent={ActiveGameHistoryFallback}>\n          <ActiveGameHistory\n            board={board}\n            activeGame={activeGame}\n            setActiveGame={setActiveGame}\n          />\n        </ErrorBoundary>\n      ) : activeTab === 3 ? (\n        <ErrorBoundary FallbackComponent={ActiveGameSheetFallback}>\n          <ActiveGameSheet\n            board={board}\n            activeGame={activeGame}\n            setActiveGame={setActiveGame}\n          />\n        </ErrorBoundary>\n      ) : null}\n    </>\n  );\n}\n","import { SimpleTopAppBar, TopAppBarFixedAdjust } from \"@rmwc/top-app-bar\";\nimport { useState } from \"react\";\nimport {\n  Drawer,\n  DrawerHeader,\n  DrawerTitle,\n  DrawerSubtitle,\n  DrawerContent,\n} from \"@rmwc/drawer\";\nimport { List, SimpleListItem } from \"@rmwc/list\";\nimport \"@rmwc/top-app-bar/styles\";\nimport \"@rmwc/drawer/styles\";\nimport \"@rmwc/list/styles\";\nimport { useCurrentPage } from \"./storage/page\";\nimport { ActiveGame } from \"./pages/game\";\n\nfunction App() {\n  const [drawerOpen, setDrawerOpen] = useState(false);\n  const [page, setPage] = useCurrentPage();\n\n  function onDrawerListClick(key: typeof page) {\n    return () => {\n      setPage(key);\n      setDrawerOpen(false);\n    };\n  }\n  return (\n    <>\n      <Drawer modal open={drawerOpen} onClose={() => setDrawerOpen(false)}>\n        <DrawerHeader>\n          <DrawerTitle>Clue Unravel</DrawerTitle>\n          <DrawerSubtitle>Made with &heart; by Bart</DrawerSubtitle>\n        </DrawerHeader>\n        <DrawerContent>\n          <List>\n            <SimpleListItem\n              activated={page === \"game\"}\n              text=\"Active game\"\n              onClick={onDrawerListClick(\"game\")}\n            />\n            <SimpleListItem\n              activated={page === \"games\"}\n              text=\"Game history\"\n              onClick={onDrawerListClick(\"games\")}\n            />\n          </List>\n        </DrawerContent>\n      </Drawer>\n      <SimpleTopAppBar\n        title={\n          page === \"game\"\n            ? \"Active game\"\n            : page === \"games\"\n            ? \"Game history\"\n            : \"Clue Unravel\"\n        }\n        navigationIcon\n        onNav={() => setDrawerOpen(true)}\n      />\n      <TopAppBarFixedAdjust />\n      {page === \"game\" && <ActiveGame />}\n    </>\n  );\n}\n\nexport default App;\n","import { useLocalItems } from \"../providers/local-items\";\n\nexport function useCurrentPage() {\n  return useLocalItems().currentPage;\n}\n","import \"normalize.css\";\nimport \"@rmwc/tabs/styles\";\nimport \"@rmwc/typography/styles\";\nimport \"@rmwc/button/styles\";\nimport \"@rmwc/select/styles\";\nimport \"@rmwc/textfield/styles\";\nimport \"@rmwc/list/styles\";\nimport \"@rmwc/avatar/styles\";\nimport \"@rmwc/fab/styles\";\nimport \"@rmwc/icon-button/styles\";\nimport \"@rmwc/chip/styles\";\nimport \"@rmwc/ripple/styles\";\nimport \"@rmwc/data-table/styles\";\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nimport { LocalItemsProvider } from \"./providers/local-items\";\nimport { GameCalculatorProvider } from \"./providers/game-calculator\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <LocalItemsProvider>\n      <GameCalculatorProvider>\n        <App />\n      </GameCalculatorProvider>\n    </LocalItemsProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}